<c:template
    xmlns:c="core"
    xmlns:docs="docs"
    docs:functions="url">
    
    <docs:docs heading="Raptor Templates">
        
        <docs:section heading="Overview">
            <div class="try-it">
                <h1><docs:icon name="play-circle" size="large"/> <a href="${url('/raptor-templates/try-online')}">Try Raptor Templates Online</a></h1>
                <div class="desc">Edit Raptor Templates in your browser with instant results!</div>
            </div>
            
            <p>
                The Raptor Templating Language is heavily inspired by  
                <a href="http://genshi.edgewall.org/wiki/Documentation/xml-templates.html">Genshi XML Template Language</a> 
                (a templating language for Python) with the good parts of JSP mixed in. The Raptor 
                Templating Language borrows most of the same features from Genshi and includes a 
                JavaScript compiler so that a template can be compiled to native JavaScript code.
            </p>
            <p>
                Since the Raptor Templating Language borrows many of the good features of JSP, 
                most templates will look very similar to JSP templates.
            </p>
            
        </docs:section>
        
        <docs:section heading="Introduction">
            <p>
                All Raptor templates are required to be well-formed XML. This
                constraint allows the template language to use the structure of the
                XML document to its advantage. For example, a template directive
                that controls structural logic can be applied as an attribute of the
                element that it controls. In addition, unlike in non-XML-based
                templating languages, whitespace removal rules are based on the XML
                structure and not a string language directives. Despite a template
                being well-formed XML, the output does not have to be well-formed
                XML which makes the Raptor Templating Language flexible enough for
                using in all types of web applications.
            </p>
            <p>
                The Raptor Templating Language aims to be easy to understand by utilizing
                concepts that front-end developers are already familiar with such as
                XML/HTML and JavaScript. While the Raptor Templating Language
                introduces a new grammar on top of XHTML, it is not an entirely new
                language which reduces the learning curve.
            </p>
            
            <docs:section heading="Sample Template">
                <p>
                    Below is a sample Raptor HTML template:
                </p>
<docs:code-editor 
    mode="xml"
    readOnly="true" 
    c:parseBodyText="false"
><![CDATA[<c:template
    xmlns:c="http://raptor.ebayopensource.org/core"
    name="demo"
    params="colors">
 
    <!-- Colors available -->
    <ul c:if="notEmpty(colors)">
        <li c:for="color in colors">
            $color
        </li>
    </ul>
     
    <!-- No colors available -->
    <div c:if="empty(colors)">
        No colors!
    </div>
     
</c:template>]]></docs:code-editor>
                <p>
                </p>
            </docs:section>
            
            <docs:section heading="Template Compilation">
                <p>
                    Given the following input data:
                </p>
<docs:code-editor 
    mode="javascript"
    readOnly="true" 
    c:parseBodyText="false"
><![CDATA[{
    colors: ["red", "green", "blue"]
}]]></docs:code-editor>
                <p>
                    The output would be the following:
                </p>
<docs:code-editor 
    mode="xml"
    readOnly="true" 
    c:parseBodyText="false"
><![CDATA[<ul><li>red</li><li>green</li><li>blue</li></ul>]]></docs:code-editor>
                <p>
                    For comparison, given the following input data consisting of an empty array of colors:
                </p>
<docs:code-editor 
    mode="javascript"
    readOnly="true" 
    c:parseBodyText="false"
><![CDATA[{
    colors: []
}]]></docs:code-editor>
                <p>
                    The output would be the following:
                </p>
<docs:code-editor 
    mode="xml"
    readOnly="true" 
    c:parseBodyText="false"
><![CDATA[<div>No colors!</div>]]></docs:code-editor>
            </docs:section>
            
            <docs:section heading="Template Directives Overview">
                <p>
                    Almost all of the Raptor templating directives can be used as either
                    an attribute or as an element. The template included above can be
                    rewritten to apply template directives as elements instead of as
                    attributes to produce the equivalent output. For example:
                </p>
                <table class="table table-bordered">
                    <thead>
                        <tr>
                            <th>
                                Applying directives using attributes
                            </th>
                            <th>
                                Applying directives using elements
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td style="width: 50%">
<docs:code-editor 
    mode="xml"
    readOnly="true" 
    c:parseBodyText="false"
><![CDATA[<c:template
    xmlns:c="core"
    name="demo"
    params="colors">
 
    <!-- Colors available -->
    <ul c:if="notEmpty(colors)">
        <li c:for="color in colors">
            $color
        </li>
    </ul>
     
    <!-- No colors available -->
    <div c:if="empty(colors)">
        No colors!
    </div>
     
</c:template>]]></docs:code-editor>
                            </td>
                            <td style="width: 50%">
<docs:code-editor 
    mode="xml"
    readOnly="true" 
    c:parseBodyText="false"
><![CDATA[<c:template
    xmlns:c="core"
    name="demo"
    params="colors">
  
    <!-- Colors available -->
    <c:if test="notEmpty(colors)">
        <ul>
            <c:for each="color in colors">
                <li>
                    $color
                </li>
            </c:for>
        </ul>
    </c:if>
      
    <!-- No colors available -->
    <c:if test="empty(colors)">
        <div>
            No colors!
        </div>
    </c:if>
     
</c:template>]]></docs:code-editor>
                            </td>
                        </tr>
                    </tbody>
                </table>
                
                <p>
                    The disadvantage of using elements to control structural logic is that they change the nesting of the elements which can impact readability. For this reason it is often more suitable to use attributes.
                </p>
            </docs:section>
            
            <docs:section heading="Extensibility">
                <p>
                </p>
            </docs:section>
            
        </docs:section>
        
        <docs:section heading="Expressions">
            <p>
            </p>
            
            <docs:section heading="Helper Functions">
                <p>
                </p>
            </docs:section>
            
            <docs:section heading="Expression Escape Sequences">
                <p>
                </p>
            </docs:section>
            
            <docs:section heading="Expression Handlers">
                <p>
                </p>
            </docs:section>
            
        </docs:section>
        
        <docs:section heading="Template Directives">
            <p>
            </p>
            
            <docs:section heading="Template">
                <p>
                </p>
                
                <docs:section heading="${startTag:c:template}">
                    <p>
                    </p>
                </docs:section>
                
                <docs:section heading="${startTag:c:include}">
                    <p>
                    </p>
                </docs:section>
                
            </docs:section>
            
            <docs:section heading="Text Replacement">
                <p>
                </p>
                
                <docs:section heading="XML Escaping">
                    <p>
                    </p>
                </docs:section>
                
                
        
            </docs:section>
        
            <docs:section heading="Conditionals">
                <p>
                </p>
                
                <docs:section heading="if">
                    <p>
                    </p>
                </docs:section>
                
                <docs:section
                    anchorName="ChooseWhenOtherwise"  
                    heading="choose…when…otherwise">
                    <p>
                    </p>
                </docs:section>
                
            </docs:section>
            
            <docs:section heading="Looping">
                <p>
                </p>
                
                <docs:section heading="for">
                    <p>
                    </p>
                    
                    <docs:section heading="Loop status variable">
                        <p>
                        </p>
                    </docs:section>
                    
                    <docs:section heading="Separator">
                        <p>
                        </p>
                    </docs:section>
                    
                </docs:section>
                
                
                
            </docs:section>
            
            <docs:section heading="Macros">
                <p>
                </p>
                
                <docs:section heading="def">
                    <p>
                    </p>
                    
                </docs:section>
                
                <docs:section heading="invoke">
                    <p>
                    </p>
                    
                </docs:section>
                
                
            </docs:section>
            
            <docs:section heading="Structure Manipulation">
                <p>
                </p>
                
                <docs:section heading="attrs">
                    <p>
                    </p>
                    
                </docs:section>
                
                <docs:section heading="bodyContent">
                    <p>
                    </p>
                    
                </docs:section>
                
                <docs:section heading="replace">
                    <p>
                    </p>
                    
                </docs:section>
                
                <docs:section heading="strip">
                    <p>
                    </p>
                    
                </docs:section>
                
            </docs:section>
            
        </docs:section>
        
        <docs:section heading="Taglibs">
            <p>
            </p>
            <docs:section heading="Runtime Tag Handlers">
                <p>
                </p>    
            </docs:section>
            
            <docs:section heading="Compile-Time Tag Handlers">
                <p>
                </p>    
            </docs:section>
            
            <docs:section heading="Helper Functions">
                <p>
                </p>    
            </docs:section>
            
        </docs:section>
        
        <docs:section heading="JavaScript API">
            <p>
            </p>
            <docs:section heading="Template Rendering">
                <p>
                </p>
                <docs:section heading="Rendering to a String">
                    <p>
                    </p>    
                </docs:section>
                
                <docs:section heading="Rendering to a Context">
                    <p>
                    </p>    
                </docs:section>
                
            </docs:section>
            
            <docs:section heading="Template Compilation">
                <p>
                </p>
                <docs:section heading="Compiling a Template">
                    <p>
                    </p>    
                </docs:section>
                
                <docs:section heading="Loading a Compiled Template">
                    <p>
                    </p>    
                </docs:section>
                
            </docs:section>
        </docs:section>
        
        <docs:section heading="Side-By-Side Comparison">
            <p>
            </p>
            <docs:section heading="Raptor Template">
                <p>
                </p>

            </docs:section>
            
            <docs:section heading="Dust Template">
                <p>
                </p>

            </docs:section>
        </docs:section>
        
    </docs:docs>
    
</c:template>