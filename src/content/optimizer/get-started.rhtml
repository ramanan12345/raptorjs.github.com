<c:template
    xmlns:c="core"
    xmlns:docs="docs"
    docs:functions="url">
    
    <docs:docs heading="RaptorJS Optmizer: Get Started">
        <docs:message type="warning">
            Documentation In-Progress
        </docs:message>
            
        <docs:section heading="Overview">
            <p>
                Once you have <a href="${url('/get-started')}">Node up-and-running</a>, you can then very quickly
                start using the RaptorJS Optimizer to generate optimized JavaScript and CSS bundles, as well as
                the HTML markup that is needed to include those bundles in your web pages.
            </p>
            <p>
                The RaptorJS Optimizer includes a simple JavaScript API for generating optimized bundles and
                HTML markup. In addition, a custom taglib for <a href="${url('/raptor-templates')}">Raptor Templates</a>
                is provided to make it even easier to build optimized pages. This guide will
                show you how to start using the JavaScript API and then provide details on using the
                RaptorJS Optimizer Taglib so that you don't have to write any JavaScript code to optimize
                your pages.
            </p>
        </docs:section>

        <docs:section heading="Sample Code">
            <p>
                The sample code for this guide can be downloaded using the following link:
                <a href="${url('/sample-projects/optimizer-get-started.zip')}">
                    <nobr>
                        RaptorJS Optimizer: Get Started - Sample Code
                    </nobr>
                </a>
            </p>
        </docs:section>

        <docs:section heading="Creating a Package">
            <p>
                <img src="${url('/images/package.png')}" width="128" height="128" class="section-icon"/>
                The first step to generating optimized web pages is to create packages for all of your modules. A module
                is a collection of related resources that work together to provide functionality in your application. 
                Modules can consist of resources of any type (JavaScript, CSS, LESS, Raptor Templates, etc.) and
                modules can have dependencies on other modules.
                Packages are necessary so that the optimizer will understand the dependencies in your application.
                A package is defined using a simple <code>package.json</code> file. The RaptorJS Optimizer
                utilizes the same format of package files described in the documentation for the
                <a href="${url('/packaging')}">
                    RaptorJS Packaging System
                </a>. The packaging format is quickly described in this guide, but for more advanced usage please
                see the developer guide for the <a href="${url('/packaging')}">
                    RaptorJS Packaging System
                </a>.
            </p>    
            <docs:section heading="Module Directories">
                <p>
                    A <code>package.json</code> file should be placed in a directory that corresponds to a module name.
                    For example, the corresponding <code>package.json</code> file for a module named "test.hello"
                    should be placed in the following location:
                    <code><nobr>&lt;modules-dir>/test/hello/package.json</nobr></code>. 
                    In order for the RaptorJS Optimizer to be able
                    to find your modules, you need to add the root directory containing your modules to the
                    <a href="${url('/resource-search-path')}">
                        <nobr>RaptorJS Resource Search Path</nobr>
                    </a> as shown in the following code:
                </p>
<docs:code-editor 
    mode="javascript"
    readOnly="true" 
    c:parse-body-text="false"
><![CDATA[raptor.require("resources").addSearchPathDir("/path/to/modules");]]></docs:code-editor>
            </docs:section>

            <docs:section heading="Package Files">
                <p>
                    At a minimum, a package needs to describe what is included in the package.
                    This is done by adding a "raptor" Â» "dependencies" property to a package.json file that is
                    an array of resources that should be included as part of the package. 
                    A simple <code>package.json</code> is shown below:
                </p>
                <docs:code-editor 
                    mode="javascript"
                    readOnly="true" 
                    c:parse-body-text="false">
                <![CDATA[
                {
                    "raptor": {
                        "dependencies": [
                            "my-widget.js",
                            "my-css-stylesheet.css",
                            "my-less-stylesheet.less",
                            "my-template.rhtml"
                        ]
                    }
                }
                ]]>
                </docs:code-editor>
                <p>
                    The above <code>package.json</code> file includes four resources. The RaptorJS Packaging System
                    is flexible enough to support any type of resource, including resources that need to be compiled
                    into either JavaScript or CSS (such as <a href="http://lesscss.org">LESS</a> CSS and 
                    <a href="${url('/raptor-templates')}">Raptor Template</a> files). Resource paths
                    that are not prefixed with a forward slash ("/") are treated as paths relative to the location
                    of the containing <code>package.json</code> file. Paths that are prefixed with a forward slash
                    are treated as relative to at least one of the resource search path entries 
                    defined for your application.
                </p>
                <p>
                    In addition to declaring which resources are included as part of a package, a <code>package.json</code>
                    file can also declare that it depends on another module (i.e., another <code>package.json</code> file).
                    A module dependency can be added using adding <code>{ "module": "&lt;module-name>" }</code>
                    entries as shown in the following example:
                </p>
                <docs:code-editor 
                    mode="javascript"
                    readOnly="true" 
                    c:parse-body-text="false">
                <![CDATA[
                {
                    "raptor": {
                        "dependencies": [
                            { "module": "widgets" },
                            { "module": "templating" },
                            "my-widget.js",
                            "my-css-stylesheet.css",
                            "my-less-stylesheet.less",
                            "my-template.rhtml"
                        ]
                    }
                }
                ]]>
                </docs:code-editor>
            </docs:section>

            <docs:section heading="Resource Slotting">
                <p>
                    The RaptorJS Optimizer allows resources to be targeted to specific locations
                    on HTML page by assigning "slot" names to resource includes. A slot
                    is just a unique name that should correspond to a location on an HTML page.
                    An application can make use of as many resource slots that it needs.
                    By default, all CSS resources will be targeted for a slot named "head" and 
                    all JavaScript resources will be targeted for a slot named "body". The following
                    example illustrates how to retarget a resource for a custom slot for a
                    resource included inside a <code>package.json</code> file:
                </p>
                <docs:code-editor 
                    mode="javascript"
                    readOnly="true" 
                    c:parse-body-text="false">
                <![CDATA[
                {
                    "raptor": {
                        "dependencies": [
                            ...
                            { "path": "my-widget.js", "slot": "my-custom-slot" }
                            ...
                        ]
                    }
                }

                ]]>
                </docs:code-editor>
            </docs:section>
    
        </docs:section>

        <docs:section heading="Describing Page Dependencies">
            <p>
                <img src="${url('/images/page-dependencies.png')}" width="128" height="128" class="section-icon"/>
                The RaptorJS optimizer describes a few options for declaring page dependencies. You can choose
                to create <code>package.json</code> files for your pages to describe the dependencies for
                each page. Another option, that is described later, is to inline page dependencies in Raptor Template files using the <a href="#Taglib">Optimizer Taglib</a>.
            </p>    
            <p>
                A <code>package.json</code> for a page is no different from a <code>package.json</code>
                file for a module. A page's <code>package.json</code> file can be placed in
                any location that is convenient for your application.
                Once you have created a <code>package.json</code> for your page you are now ready
                to optimize your page as described in the next section.
            </p>
        </docs:section>

        <docs:section heading="Optimizing a Page">
            <p>
                <img src="${url('/images/optimized-delivery.png')}" width="128" height="128" class="section-icon"/>
                The RaptorJS Optimizer provides a simple JavaScript API that can be utitlized
                to generate optimized bundles and HTML markup. The default configuration will
                write all bundles to a "static" directory in the current working directory of the running process.
                In addition, the default configuration will use "/static/" as the URL prefix for all
                resource URLs. In addition, by default, no minification or other filters are applied
                to JavaScript and CSS code. Lastly, the default configuration configures no bundles so
                all resources of the same content type (i.e., either CSS or JavaScript) targeted
                for the same slot will be automically bundled together.
            </p>    
            <docs:section heading="Example Setup">
                For this guide, we will use the following directory structure:
                <ul>
                    <li>
                        <b>/path/to/my-app/</b>
                        <ul>
                            <li>
                                <b>modules/</b>
                                <ul>
                                    <li>
                                        <b>module-a/</b>
                                        <ul>
                                            <li>
                                                package.json
                                            </li>
                                            <li>
                                                module-a.js
                                            </li>
                                            <li>
                                                module-a.css
                                            </li>
                                        </ul>
                                    </li>
                                    <li>
                                        <b>module-b/</b>
                                        <ul>
                                            <li>
                                                package.json
                                            </li>
                                            <li>
                                                module-b.js
                                            </li>
                                            <li>
                                                module-b.css
                                            </li>
                                        </ul>
                                    </li>
                                </ul>
                            </li>
                            <li>
                                <b>pages/</b>
                                <ul>
                                    <li>
                                        <b>test-page/</b>
                                        <ul>
                                            <li>
                                                package.json
                                            </li>
                                            <li>
                                                test-page.js
                                            </li>
                                            <li>
                                                test-page.css
                                            </li>
                                        </ul>
                                    </li>
                                </ul>
                            </li>
                            <li>
                                run-optimizer.js
                            </li>
                        </ul>
                    </li>
                </ul>
            </docs:section>

            <docs:section heading="Using the JavaScript API">
                <p>
                    If you are okay with the defaults, you can easily optimize the "test-page" from the example above using the
                    following JavaScript code:
                </p>
                <docs:code-editor 
                    mode="javascript"
                    readOnly="true" 
                    c:parse-body-text="false">
                <![CDATA[

                require('raptor').create();

                var files = raptor.require('files'),
                    resources = raptor.require('resources'),
                    optimizer = raptor.require('optimizer');

                resources.addSearchPathDir(files.joinPaths(__dirname, 'modules'));

                var optimizedPage = optimizer.optimizePage({
                    name: 'test-page',
                    packageFile: files.joinPaths(__dirname, 'pages/test-page/package.json')
                });
                
                ]]>
                </docs:code-editor>
                <p>
                    Assuming the above script is saved to a file name "run-optimizer.js", 
                    the following commands should be used to execute the above program from the root directory of the application:
                </p>
<pre class="sh" xml:space="preserve">
$ npm install raptor
$ node run-optimizer.js
</pre>
                <p>
                    After running the above commands, the value of the <code>optimizedPage</code> variable will
                    be the following (formatted as JSON):
                </p>
                <docs:code-editor 
                    mode="javascript"
                    readOnly="true" 
                    c:parse-body-text="false">

                <![CDATA[

                {
                    'htmlBySlot': {
                        'body': '<script type="text/javascript" src="/static/test-page-body-f01892af.js"></script>',
                        'head': '<link rel="stylesheet" type="text/css" href="/static/test-page-head-bf4cf798.css">'
                    },
                    'loaderMetadata': {}
                }

                ]]>
                </docs:code-editor>
                <p>
                    In addition, the call to <code>optimizer.optimizePage(...)</code> in the above application will 
                    cause the following
                    files to be written to the <code>static</code> directory:
                </p>
                <ul>
                    <li>
                        test-page-body-f01892af.js
                    </li>
                    <li>
                        test-page-head-bf4cf798.css
                    </li>
                </ul>

                
            </docs:section>

            <docs:section heading="Injecting HTML Markup">
                <p>
                    For the RaptorJS Optimizer to be helpful you will need
                    to inject the resulting HTML into the appropriate locations
                    in your HTML page. To do this, you will typically use your 
                    favorite templating language. For illustration purposes only,
                    if a templating language were not being used, the following
                    crude JavaScript code could be used to inject
                    the HTML for the resource slots:
                </p>
                <docs:code-editor 
                    mode="javascript"
                    readOnly="true" 
                    c:parse-body-text="false">
                <![CDATA[

                var pageHtml = 
                    '<html><head><title>Test Page</title>' + 
                    optimizedPage.getSlotHtml('head') + 
                    '</head><body>Hello World' + 
                    optimizedPage.getSlotHtml('body') + 
                    '</body></html>';

                ]]>
                </docs:code-editor>
                <p>
                    An Optimizer Taglib is provided for the Raptor Templating
                    language and this taglib makes it extremely simple to define
                    page dependencies and to inject slot HTML
                    into a page. In addition, the Optimizer Taglib
                    will cache the results of a call to
                    <code>optimizePage()</code> so that runtime
                    performance is not impacted after the optimized page bundles
                    are generated for the first time. Utilizing
                    the Optimizer Taglib is described later in this guide.
                </p>
            </docs:section>
    
        </docs:section>

        <docs:section heading="Configuring the Optimizer">
            <p>
                In most cases, you will want to configure the RaptorJS Optimizer
                based on how the optimized web application will be deployed. The RaptorJS Optmizer
                is extremely configurable and even supports multiple profiles so that
                you can easily switch between different configurations for
                development, production, etc. The RaptorJS Optimizer supports
                an XML configuration file that makes it easy to enable
                or disable minification, to control how modules are bundled,
                to control how resource URLs are generated, etc.
            </p>    
            <docs:section heading="XML Configuration File">
                <p>
                    A simple configuration file is shown below:
                </p>
                <docs:code-editor 
                    mode="xml"
                    readOnly="true" 
                    c:parse-body-text="false"
                ><![CDATA[
                <optimizer-config>

                    <minify-js>${minify}</minify-js>
                    <output-dir>static</output-dir>
                    <url-prefix>http://my-cdn/static/</url-prefix>

                    <bundles name="default">

                        <bundle name="jquery">
                            <module name="jQuery" recursive="true"/>
                        </bundle>

                        <bundle name="core">
                            <module name="core" recursive="true"/>
                            <init-raptor/>
                            <module name="listeners" recursive="true"/>
                            <module name="widgets" recursive="true"/>
                        </bundle>
                        
                        <bundle name="templating">
                            <module name="templating" recursive="true"/>
                        </bundle>

                    </bundles>
                    
                </optimizer-config>]]>
                </docs:code-editor>                
                <p>
                    An optimizer XML configuration file is very flexible
                    and gives application developers a lot of control over the optimization
                    process. Amongst other
                    things, the optimizer configuration file allows
                    developers to define resource bundles. If a page
                    depends on a resource that is part of a bundle then the entire
                    bundle will be included in the optimized page. By default,
                    any resource that is not part of a bundle is bundled with
                    all other resources that are not part of a bundle and are of the same content type 
                    and targeted for the same slot. If
                    resources are used across multiple pages, or if you would to enable
                    the web browser to downloaded multiple resource bundles in parallel then
                    it is important to define resource bundles for your application.
                </p>
                <p>
                    Below is a quick summary of the important configuration options that the optimizer
                    XML configuration file supports:
                </p>
                <ul>
                    <li>
                        <b>Resource bundles</b>: Configure any number of bundles dependin on your application's needs
                    </li>
                    <li>
                        <b>Enabling/disabling resource bundling</b>: If bundling is disabled then the resource bundles defined in the XML configuration file will be ignored
                    </li>
                    <li>
                        <b>In-place deployment</b>: Have the optimizer generate URLs to the original resource on disk (the original resource will remain untouched)
                    </li>
                    <li>
                        <b>URL prefix</b>: Configure a special URL prefix for all URLs to optimized bundles. This option is necessary for certain server configurations and for utilizing a CDN host name
                    </li>
                    <li>
                        <b>Output directory</b>: Tell the optimizer where to write bundles to disk
                    </li>
                    <li>
                        <b>Enabling/disabling minification</b>: If minification is enabled then resources will be processed to reduce their size
                    </li>
                </ul>
                <p>
                    For a full list of configuration options that are supported, please see the 
                    <a href="${url('/optimizer/developer-guide')}">
                        RaptorJS Optimizer Developer Guide.    
                    </a>
                    
                </p>
            </docs:section>
            <docs:section heading="Loading an XML Configuration File">
                <p>
                    To configure the default optimizer using
                    an XML configuration file, code similar to the following
                    can be used:
                </p>
                <docs:code-editor 
                    mode="javascript"
                    readOnly="true" 
                    c:parse-body-text="false">
                <![CDATA[

                raptor.require('optimizer').configure('path/to/optimizer-config.xml', {
                    minify: false
                })

                ]]>
                </docs:code-editor>
                <docs:message type="info">
                    <p>
                        NOTE: The second parameter for the <code>optimizer.configure()</code>
                              method is a parameters object. Any parameters provided can be
                              used as variables inside the XML configuration file using
                              the \${&lt;variable-name>} syntax. For the above 
                              example, "minify" is a paramter that can be used to enable/disable
                              minification based on the following XML fragment:
                        <docs:code-editor 
                            mode="xml"
                            readOnly="true" 
                            c:parse-body-text="false">
                        <![CDATA[
                        
                        <optimizer-config>
                            ...
                            <minify-js>${minify}</minify-js>
                            ...
                        </optimizer-config>

                        ]]>
                        </docs:code-editor>
                    </p>
                </docs:message>
            </docs:section>

        </docs:section>

        <docs:section heading="Optimizer Taglib" anchor-name="Taglib">
            <p>
                A custom Raptor Templates Taglib is provided to make optimizing pages with the RaptorJS Optimizer
                almost effortless. Below is a sample page built using Raptor Templates:
            </p>
            <docs:code-editor 
                mode="xml"
                readOnly="true" 
                c:parse-body-text="false">
            <![CDATA[
            
            <c:template
                xmlns:c="core"
                xmlns:optimizer="optimizer">
                
                <optimizer:page name="test-page">
                    <dependencies>
                        <module name="module-a"/>
                        <module name="module-b"/>
                        <css path="test-page.css"/>
                        <css path="test-page.css"/>
                        <js path="test-page.js"/>
                    </dependencies>
                </optimizer:page>
                
                <html>
                    <head>
                        <title>Test Page</title>
                        <optimizer:slot name="head"/>
                    </head>
                    <body>
                        Hello World!
                        <optimizer:slot name="body"/>
                    </body>
                </html>
            </c:template>

            ]]>
            </docs:code-editor>
            <p>
                When the above Raptor Template is rendered the output is the following:
            </p>
            <docs:code-editor 
                mode="htmlmixed"
                readOnly="true" 
                c:parse-body-text="false">
            <![CDATA[
            <html>
                <head>
                    <title>Test Page</title>
                    <link rel="stylesheet" type="text/css" href="/static/test-page-head-bf4cf798.css">
                </head>
                <body>
                    Hello World!
                    <script type="text/javascript" src="/static/test-page-body-f01892af.js"></script>
                </body>
            </html>
            ]]>
            </docs:code-editor>

            <docs:message type="info">
                NOTE: By default, the Optimizer Taglib uses the global optimizer configured using the 
                <code>optimizer.configure(...)</code> method as shown in the following example:
                <docs:code-editor 
                    mode="javascript"
                    readOnly="true" 
                    c:parse-body-text="false">
                <![CDATA[

                raptor.require('optimizer').configure('path/to/optimizer-config.xml', {
                    minify: false
                })

                ]]>
                </docs:code-editor>
            </docs:message>

            <p>
                For a more advanced usages of the Optimizer Taglib, please see the full
                documentation for the
                <a href="${url('/optimizer/taglib')}">
                    Optimizer Taglib
                </a>
            </p>
        </docs:section>

    </docs:docs>
    
</c:template>

