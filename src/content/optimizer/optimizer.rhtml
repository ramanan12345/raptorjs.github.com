<c:template
    xmlns:c="core"
    xmlns:docs="docs"
    docs:functions="url">
    
    <docs:docs heading="RaptorJS Optmizer">
        <docs:message type="warning">
            Documentation In-Progress
        </docs:message>
            
        <docs:section heading="Overview">
            <docs:section heading="Features at a Glance">
                <ul>
                    <li>
                        <docs:popover title="Source code agnostic">
                            <docs:popover-content>
                                Write code however you prefer with no restriction on which third-party libraries you choose to use
                            </docs:popover-content>
                            Source code agnostic
                        </docs:popover> 
                    </li>
                    <li>Generates optimized resource bundles <i>and</i> the HTML markup to include them in web pages</li>
                    <li>Improves performance by reducing the number of HTTP requests through resource bundling</li>
                    <li>Supports content distribution networks (CDNs)
                        <ul>
                            <li>Custom URL prefixes</li>
                            <li>Resource checksums included in URLs for optimal caching</li>
                        </ul>
                    </li>
                    <li>Works at build time <i>or</i> at request time</li>
                    <li>Driven by the <a href="${url('/packaging')}">RaptorJS Packaging</a> system
                        <ul>
                            <li>Package everything using simple <code>package.json</code> files</li>
                            <li>Supports package extensions for targeted optimizations (target code for specific browsers, devices, etc.)</li>
                            <li>Supports any type of resource (LESS, Raptor Templates, etc.) with automatic compilation</li>
                        </ul>
                    </li>
                    <li>
                        Supports
                        <docs:popover title="Optimized asynchronous module loading">
                            <docs:popover-content>
                                For modules that may be downloaded asynchronously,
                                the RaptorJS Optimizer generates the metadata containing
                                the URLs that are required by the module to function.
                                The asynchronous module loader uses this information
                                to optimally download modules.
                            </docs:popover-content>
                            optimized asynchronous module loading
                        </docs:popover> 
                    </li>
                    <li>Supports
                        <docs:popover title="In-place Deployment">
                            <docs:popover-content>
                                With in-place deployment enabled, URLs are generated such that they
                                point to the original file on disk. Therefore, changes to files
                                are reflected instantly without having to monitor
                                the file system for changes.
                            </docs:popover-content>
                            in-place deployment
                        </docs:popover> 
                        for improved developer productivity
                    </li>
                    <li>Easily configurable
                        <ul>
                            <li>Supports profiles for targeting development, production, etc.</li>
                            <li>Configurable resource bundling</li>        
                        </ul>
                    </li>
                    <li>Supports custom filters for minification, pre/post-processing, etc.</li>
                    <li>Simple JavaScript API and command-line interface</li>
                </ul>
            </docs:section>
            <docs:section heading="Benefits">
                <p>
                    The RaptorJS optimizer simplifies the development
                    of web applications by relieving developers from
                    worrying about and managing web page dependencies (i.e. CSS and JavaScript resources).
                    RaptorJS provides structure around dependencies by allowing every module and UI component to
                    declare its own dependencies as part of a package. Each package
                    provides enough information for the RaptorJS optimizer
                    to optimize the delivery of web pages with little to no developer intervention.
                    The web page developer only needs to tell the optimizer which
                    top-level modules, UI components and resources are required
                    and the optimizer will take care of the restâ€”including generating
                    the static resource bundles <i>and</i> the HTML markup to include
                    the required resources in an HTML page.
                </p>
                <p>
                    Unlike other optimizers, the RaptorJS optimizer is source-code agnostic. As a developer, you
                    can write your web application code however you prefer and still
                    benefit from the RaptorJS optimizer. 
                    Third-party libraries can easily be utilized with no constraints, but you will most likely
                    want to wrap the third-party library with one or more 
                    
                    <docs:popover title="Packages">
                         <c:attr name="content">
                            Only a package.json file needs to be created and added to your codebase. 
                            You will not need to change the code for the library.
                        </c:attr>
                         RaptorJS packages
                    </docs:popover>
                    
                    to make dependencies explicit.
                </p>
                <p>
                    RaptorJS is extensible and supports any type of resource as a dependency (in addition to raw JavaScript and CSS resources). 
                    Out of the box, RaptorJS supports compiled resources such as <a href="${url('/raptor-templates')}">Raptor Templates</a> and 
                    <a href="http://lesscss.org/">LESS</a> as dependencies, but you can
                    add support for your own compiled resources with just a few lines of code.
                </p>
                <p>
                    Optimizing an application by changing how resources are bundled or minified
                    does not require any changes to application code. The RaptorJS optimizer
                    is developer-friendly by supporting multiple profiles to easily enable
                    and disable optimization features such minification and bundling.
                </p>
                <p>
                    Lastly, the RaptorJS optimizer is aware of
                    
                    <docs:popover title="Package Extensions">
                        <c:attr name="content">
                            Package extensions allow developers to define packages
                            that include dependencies that are only included
                            if a specified extension is enabled. Package
                            extensions allow for conditional dependencies.
                        </c:attr>
                         package extensions
                    </docs:popover>
                    which allow
                    pages to be optimized differently based on the target environment.
                    This allows developers to design web applications that adapt to the target
                    client and only send the code that is required. For more
                    information on package extensions please see
                    <a href="${url('/packaging')}">Packaging and Extensions</a>.
                </p>
            </docs:section>
        </docs:section>
        
        <docs:section heading="Page Dependencies">
            <p>
                Complex pages will often depend on a lot of JavaScript and
                CSS resources and those dependencies often change over time.
                RaptorJS supports the concept of <i>package everything</i>.
                This includes creating a package for a page that describes
                all of the top-level dependencies for a page. The page package
                can add dependencies for other module packages. The same package.json
                file is used to declare packages for pages, modules, UI components, etc.
            </p>
            
            <docs:section heading="Declaring Page Dependencies">
                <p>
                    The modules and resources that a page depends on should be 
                    declared in the page's <code>package.json</code> file. A
                    sample <code>package.json</code> file is shown below:
                </p>
<docs:code-editor 
    mode="javascript"
    readOnly="true" 
    c:parse-body-text="false"
><![CDATA[{
    "includes": [
        {"module": "widgets"},
        {"module": "pubsub"},
        {"module": "components/buttons/Button"},
        "page.js",
        "page.css"
    ]
}]]></docs:code-editor>
                <p>
                    The above <code>package.json</code> file declares
                    that a page depends on three modules (i.e., <i>widgets</i>, <i>pubsub</i> and <i>components/buttons/Button</i>).
                    Each of those modules will have a <code>package.json</code>
                    file that describes the dependencies for each. The <code>package.json</code>
                    file also declares that two resources should be sent to the browser 
                    (i.e. "page.js" and page.css). A page's <code>package.json</code> file
                    provides enough information for the RaptorJS optimizer
                    to be able to know how to generate the resources are
                    required for the page to function in a browser. The next few
                    sections describes how the required resources are injected into a web page.
                    For more information on declaring RaptorJS packages, please
                    see the documentation <a href="${url('/packaging')}">RaptorJS Packaging and Extensions</a>.
                </p>
            </docs:section>
            
            <docs:section heading="Resource Slots">
                <p>
                    An HTML page that is sent to the browser will need to
                    include <code>${entity:lt}script></code> and <code>${entity:lt}link></code>
                    tags that link to the required resources for the page to function
                    correctly.
                    The RaptorJS optimizer allows resources to be targeted for any location
                    on a page through the use of "slots". Slot markers can be added
                    to an HTML page and resources can be targeted for any available user-defined slot.   
                </p>
                
                <docs:section heading="Defining Slots">
                    <p>
                        The RaptorJS Optimizer provides a JavaScript API that includes a method for retrieving
                        the HTML markup for the slots on the page. 
                        You can then use any templating
                        language to inject the HTML content into your page.
                    </p>
                    <p>
                        For convenience, Raptor Templates includes an "optimizer"
                        taglib that can be used to define slots inside
                        the HTML template and to also connect HTML pages
                        with its corresponding package.json file. The basic structure
                        for a page to be optimized using Raptor Templates is the following:
                    </p>
<docs:code-editor 
    mode="xml"
    readOnly="true" 
    c:parse-body-text="false"
><![CDATA[<c:template
    xmlns:c="core"
    xmlns:optimizer="optimizer">
 
    <optimizer:page package="my-page-package.json"/>
    
    <html>
        <head>
            <title>Hello World</title>
            <optimizer:slot name="head"/>
        </head>
        <body>
            ...
            <optimizer:slot name="body"/>
        </body>
    </html>
     
</c:template>]]></docs:code-editor>
                    <p>
                        For more information on the JavaScript API and Taglib please see the following sections:
                    </p>
                    <ul>
                        <li><a href="#JavaScriptAPI">JavaScript API</a></li>
                        <li><a href="#OptimizerTaglib">Optimizer Taglib</a></li>
                    </ul>
                </docs:section>
                
                <docs:section heading="Targeting Slots">
                <p>
                    By default, CSS resources are injected into the "head" slot and JavaScript
                    resources are injected into the "body" slot. Both of these defaults
                    can easily be overridden at the resource level by adding a "slot" 
                    property to the resource include. For example:
                </p>
<docs:code-editor 
    mode="javascript"
    readOnly="true" 
    c:parse-body-text="false"
><![CDATA[{
    "includes": [
        ...
        { path: "my-library.js", slot="head" }
    ]
}]]></docs:code-editor>
                    <p>
                        When optimizing the above package, the RaptorJS optimizer will place
                        "my-library.js" into the "head" slot instead of the default "body" slot.
                    </p>
                </docs:section>
                
            </docs:section>
            
            <docs:section heading="Optional Package Extensions">
                <p>
                    When optimizing a page, the RaptorJS optimizer
                    allows a set of enabled extensions to be passed in.
                    When the optimizer encounters a package with extensions
                    it checks each extension to see if it is enabled. The RaptorJS
                    optimizer allows extensions to be globally enabled,
                    enabled at the page level or enabled at the request/context level.
                    The JavaScript API allows a set of enabled extensions to
                    be passed in as an argument when generating the
                    slot HTML for a page. The optimizer taglib
                    allows provides tags for enabling and disabling extensions.
                </p>
                <p>
                    For more information on the JavaScript API and Taglib please see the following sections:
                </p>
                <ul>
                    <li><a href="#JavaScriptAPI">JavaScript API</a></li>
                    <li><a href="#OptimizerTaglib">Optimizer Taglib</a></li>
                </ul>
            </docs:section>
            
            <docs:section heading="Compiled Resources">
                <p>
                    The RaptorJS optimizer supports compiled resources such
                    as LESS CSS files and Raptor Template files. The RaptorJS
                    optimizer relies on the <a href="${url('/packaging')}">RaptorJS Packaging and Extensions</a>
                    for compiling resource dependencies.
                </p>
                <p>
                    For more information on registering new types of compiled
                    resources please see <a href="${url('/packaging')}#RegisteringIncludeTypes">RaptorJS Packaging and Extensions</a>.
                </p>
            </docs:section>
            
        </docs:section>
    
    
        <docs:section heading="Configuration">
            <p>
                The configuration for the RaptorJS optimizer is driven
                by a simple, but powerful <code>optimizer-config.xml</code>
                file that will typically be placed in the root of a
                project.
            </p>
            <p>
                The optimizer configuration file supports profiles
                so that the page can be optimized differently
                based on which profile is enabled. For example,
                to improve developer productivity, bundling of resources
                and resource minification can be disabled.
            </p>
            <p>
                Below is a basic optimizer configuration file:
            </p>
<docs:code-editor 
    mode="xml"
    readOnly="true" 
    c:parse-body-text="false"
><![CDATA[<optimizer-config>

    <params>
        <minify>true</minify>
    </params>

    <enabled-extensions>jquery,browser,production</enabled-extensions>
    
    <resource-url-prefix>/static/</resource-url-prefix>
    
    <minify-js>${minify}</minify-js>
    
    <resource-search-path>
        <dir path="."/>
        <dir path="modules"/>
    </resource-search-path>

    <clean-dirs>
        <dir path="static"/>
    </clean-dirs>

    <bundles-output-dir>static</bundles-output-dir>

    <bundles>

        <bundle name="jquery">
            <module name="jQuery" recursive="true"/>
        </bundle>
        
        <bundle name="core">
            <module name="core" recursive="true"/>
            <init-raptor/>
            <module name="listeners" recursive="true"/>
            <module name="widgets" recursive="true"/>
            <module name="templating" recursive="true"/>
        </bundle>

    </bundles>
    
</optimizer-config>]]></docs:code-editor>
            
            <docs:section heading="Profiles">
                <p>
                    The RaptorJS optimizer configuration
                    file supports profiles using the <code>${entity:lt}profile></code> and <code>${entity:lt}enable-profile></code>
                    tags as shown in the following example:
                </p>
<docs:code-editor 
    mode="xml"
    readOnly="true" 
    c:parse-body-text="false"
><![CDATA[<optimizer-config>

    <params>
        <!-- Default to the "development" profile -->
        <profile>development</profile>
    </params>

    <!-- Enable the profile with the specified name -->
    <enable-profile>${profile}</enable-profile>
    
    <profile name="development">
        ...
        <!-- Disable minification in development -->
        <minify-js>false</minify-js>
        ...
    </profile>
    
    <profile name="production">
        ...
        <!-- Enable minification in production -->
        <minify-js>false</minify-js>
        ...
    </profile>
    
    ...
    
</optimizer-config>]]></docs:code-editor>
                <p>
                    Parameters can be loaded from a JSON file, passed in as command line arguments or provided
                    to the optimizer when using the JavaScript API. For more information on 
                    parameters please see the following sections:
                </p>
                <ul>
                    <li><a href="#JSONParams">Configuration ${entity:raqou} Configuration Params from JSON File</a></li>
                    <li><a href="#CLIParams">Command Line Interface ${entity:raqou} Configuration Params</a></li>
                    <li><a href="#JavaScriptAPIParams">JavaScript API ${entity:raqou} Configuration Params</a></li>
                </ul>
            </docs:section>
            
            <docs:section heading="Bundling">
                <p>
                    The optimizer will combine resources based on a bundle configuration
                    to reduce the number of HTTP round-trips required to deliver a
                    web page. The Rapt
                </p>
            </docs:section>
            
            <docs:section heading="Minification and Filters">
                <p>
                </p>
            </docs:section>
            
            <docs:section heading="Output Directories">
                <p>
                    The optimizer will combine resources based on a bundle configuration
                    to reduce the number of HTTP round-trips required to deliver a
                    web page. The Rapt
                </p>
            </docs:section>
            
            <docs:section heading="Configuration Params from JSON File" anchor-name="JSONParams">
                <p>
                    
                </p>
            </docs:section>
            
            <docs:section heading="Sample Configuration Files">
                Sample Configuration Files:
                <ul>
                    <li>
                        <a href="https://github.com/raptorjs/raptorjs.github.com/blob/master/optimizer/sample-configuration-files/optimizer-config-profiles.xml" target="blank">
                            Sample Configuration File with Profiles
                        </a>
                    </li>
                </ul>
                
            </docs:section>
            
        </docs:section>
        
        <docs:section heading="Asynchronous Loading">
            <p>
            </p>
            
            <docs:section heading="Asynchronous Module Includes">
                <p>
                </p>
            </docs:section>
        
            <docs:section heading="Loading Modules Includes">
                <p>
                </p>
            </docs:section>
        </docs:section>
        
        <docs:section heading="Building Websites">
            <p>
            </p>
            
            <docs:section heading="Static Websites">
                <p>
                </p>
            </docs:section>
            
            <docs:section heading="Server-based Websites">
                <p>
                </p>
            </docs:section>
            
            <docs:section heading="CDN Integration">
                <p>
                </p>
            </docs:section>
            
        </docs:section>
        
        <docs:section heading="Command Line Interface">
            <p>
                
            </p>
            
            <docs:section heading="Parameters" anchor-name="CLIParams">
                <p>
                    
                </p>
            </docs:section>
            
        </docs:section>
        
        <docs:section heading="JavaScript API" anchor-name="JavaScriptAPI">
            <p>
            </p>
            
            <docs:section heading="Registering Pages">
                <p>
                </p>
            </docs:section>
            
            <docs:section heading="Generating Page HTML">
                <p>
                    The <code>OptimizerEngine</code> object
                    provides a <code>optimizer.getPageHtmlBySlot()</code> method
                    that can be used to generate the HTML for
                    a page that has been previously registered. The sample
                    code below shows how to use the <code>optimizer.getPageHtmlBySlot</code>
                    method:
                </p>
<docs:code-editor 
    mode="javascript"
    readOnly="true" 
    c:parse-body-text="false"
><![CDATA[var optimizer = raptor.require("optimizer").createOptimizer();
//...
optimizer.registerPage({
    name: "my-page",
    packageResource: "/path/to/my-page-package.json"
});
//...
var pageHtmlBySlot = optimizer.getPageHtmlBySlot('my-page');]]></docs:code-editor>
                    <p>
                        
                        After executing the above code, 
                        the value of <code>pageHtmlBySlot</code>
                        would be a JavaScript object similar to the following:  
                    </p>
<docs:code-editor 
    mode="javascript"
    readOnly="true" 
    c:parse-body-text="false"
><![CDATA[
{
    'body': '<script type="text/javascript" src="/static/core-body-81a10a80.js"></script>\
             <script type="text/javascript" src="/static/jquery-body-371da524.js"></script>\
             <script type="text/javascript" src="/static/widgets-body-658fce85.js"></script>\
             <script type="text/javascript" src="/static/my-page-body-27a3f194.js"></script>',
    'head': '<link rel="stylesheet" type="text/css" href="/static/my-page-head-c07b8669.css" />\
             <link rel="stylesheet" type="text/css" href="/static/bootstrap-head-700d799c.css" />'
}]]></docs:code-editor>

                    <p>
                        For the above example, the files written to disk
                        would be the following:
                    </p>
                    <ul>
                        <b>/path/to/my/webapp/static/</b>
                        <ul>
                            <li>core-body-81a10a80.js</li>
                            <li>jquery-body-371da524.js</li>
                            <li>widgets-body-658fce85.js</li>
                            <li>my-page-body-27a3f194.js</li>
                            <li>my-page-head-c07b8669.css</li>
                            <li>bootstrap-head-700d799c.css</li>
                        </ul>
                    </ul>
            </docs:section>
            
            <docs:section heading="Dependency Caching">
                <p>
                    The result of executing the <code>optimizer.getPageHtmlBySlot()</code>
                    method is <b>cached</b>. When the <code>optimizer.getPageHtmlBySlot</code> method is executed
                    for the first time for a particular page the optimizer
                    will first write the optimized resource bundles to disk (destination directory is determined by the optimizer's configuration)
                    and then generate the HTML to include the resource
                    bundles for the specified page.
                </p>
            </docs:section>
            
        </docs:section>
        
        <docs:section heading="Optimizer Taglib" anchor-name="OptimizerTaglib">
            <p>
            </p>
            
            <docs:section heading="Linking Page Packages">
                <p>
                    The <code>${entity:lt}optimizer:page></code> tag can be used to associate
                    a rendering context with a optimizer page. The only
                    required attribute for the <code>${entity:lt}optimizer:page></code> tag
                    is the <code>package</code> attribute. The <code>package</code> attribute
                    should be used to specify a relative path to a <code>package.json</code>
                    file that describes the dependencies for a page.
                    For example: 
                </p>
<docs:code-editor 
    mode="xml"
    readOnly="true" 
    c:parse-body-text="false"
><![CDATA[<optimizer:page package="my-page-package.json"/>]]></docs:code-editor>
                <p>
                    The above example assumes that there is a file named "my-page-package.json"
                    in the same directory that contains the template.
                </p>
            </docs:section>
            
            <docs:section heading="Defining Slots" anchor-name="OptimizerTaglibDefiningSlots">
                <p>
                    The <code>${entity:lt}optimizer:slot></code> tag can be used
                    to define a slot for a page. When rendered, the <code>${entity:lt}optimizer:slot></code> tag
                    will render the dependency HTML corresponding to the specified slot.
                </p>
<docs:code-editor 
    mode="xml"
    readOnly="true" 
    c:parse-body-text="false"
><![CDATA[<optimizer:slot name="head"/>]]></docs:code-editor>
            </docs:section>
            
            <docs:section heading="Enabling Extensions" anchor-name="OptimizerTaglibEnablingExtensions">
                <p>
                    The <code>${entity:lt}optimizer:enable-extension></code> tag can be used
                    to enable an extension for the current request. The only required
                    attribute is the "name" attribute which defines the name of the example.
                </p>
                <p>
                    The following code illustrates how to enable an extension:
                </p>
<docs:code-editor 
    mode="xml"
    readOnly="true" 
    c:parse-body-text="false"
><![CDATA[<optimizer:enable-extension name="ipad"/>]]></docs:code-editor>
                <p>
                    In the above example, an extension named "ipad" is enabled.
                    Any package that contains an extension named "ipad" will
                    then have its dependencies included in the optimized page.
                </p>
                <docs:message type="warning">
                    All extensions must be enabled <i>before</i> any slots that
                    are defined on the page.
                </docs:message>
            </docs:section>
            
        </docs:section>
        
    </docs:docs>
    
</c:template>

