<c:template
    xmlns:c="core"
    xmlns:docs="docs"
    docs:functions="url">
    
    
    
    <docs:docs heading="Packaging and Extensions" disqus-id="packaging-developer-guide">
        <docs:message type="warning">
            Documentation In-Progress
        </docs:message>
            
        <docs:section heading="Overview">
            <p>
                RaptorJS extends the popular <code>package.json</code>
                format so that it is better suited for packaging up code to be delivered
                to a browser <i>and</i> be loaded on the server. 
                RaptorJS packages allows developers to make dependencies explicitâ€”including
                which dependencies are environment-specific.
            </p>
            <p>
                RaptorJS packages can be created for JavaScript modules and UI components. 
                RaptorJS imposes no requirements on the code that is packaged so developers
                can continue to write code however they prefer. RaptorJS packages
                are extensible and support any type of dependency (
                    JavaScript, CSS, 
                    <a href="http://lesscss.org/">
                        LESS
                    </a>, 
                    <a href="${url('/raptor-templates')}">
                        Raptor Templates
                    </a>, etc.
                ).
            </p>
            <p>
                RaptorJS packages can be loaded on the server using the
                <a href="${url('/module-loader')}">
                    <nobr>RaptorJS JavaScript Module Loader</nobr>
                </a>. 
                The <a href="${url('/optimizer')}">
                    <nobr>RaptorJS Optimizer</nobr>
                </a> uses RaptorJS packages to determine
                which resources need to be optimized for delivery
                to web browsers and the
                <a href="${url('/module-loader/get-started-async')}">
                    <nobr>RaptorJS Async Loader</nobr>
                </a>
                 uses information from packages to optimally download
                 packages asynchronously.
            </p>
        </docs:section>

        <docs:section heading="Package Format">
            <p>
                The RaptorJS package format loosely follows the 
                <a href="http://wiki.commonjs.org/wiki/Packages/1.0#Package_Descriptor_File">
                    CommonJS Packages 1.0 Specification
                </a> format in a compatible way. The only difference between a RaptorJS package
                and a standard CommonJS package is that a RaptorJS package introduces a 
                new top-level <code>raptor</code> property. The value of the <code>raptor</code> property
                is an object that may contain two nested properties:
            </p>
            <ul>
                <li>
                    <b>dependencies</b>: An array of RaptorJS dependencies.
                </li>
                <li>
                    <b>extensions</b>: An array of named extensions, each which contains additional
                                       environment-specific dependencies.
                </li>
            </ul>
            <docs:section heading="Sample RaptorJS Package">
                <p>
                    A sample RaptorJS package is shown below:
                </p>
                <docs:code-editor 
                        autoResize="true"
                        indentUnit="4"
                        readOnly="true"
                        mode="javascript">
                <![CDATA[
                {
                    "name": "my-module",
                    "version": "1.0",
                    "description": "My amazing module.",
                    "raptor": {
                        "dependencies": [
                            { "module": "another-module" },
                            "my-module-common.js",
                        ],
                        "extensions": [
                            {
                                "name": "server",
                                "dependencies": [
                                    "my-module-server.js"
                                ]
                            },
                            {
                                "name": "browser",
                                "dependencies": [
                                    "my-module.less"
                                ]
                            }
                        ]
                    }   
                }
                ]]>
                </docs:code-editor>
            </docs:section>
            <docs:section heading="Dependencies Format">
                <p>
                    Dependencies are provided as an array to maintain order.
                    Each dependency may be a complex JSON <code>object</code> or a simple
                    JSON <code>string</code>. When a dependency is provided
                    as an <code>object</code>, the <code>type</code> property
                    is used to determine the dependency type. For example:
                </p>
                <docs:code-editor 
                        autoResize="true"
                        indentUnit="4"
                        readOnly="true"
                        mode="javascript">
                <![CDATA[
                "dependencies": [
                    { "type": "module", "name": "my-module" },
                    { "type": "js", "path": "widget.js" }
                ]
                ]]>
                </docs:code-editor>
                <p>
                    RaptorJS packages support a short-hand for resource dependencies
                    by allowing the dependency to be provided as a simple <code>string</code>
                    path. When a <code>string</code> dependency is encountered the file extension is used
                    to determine the type. For example:
                </p>
                <docs:code-editor 
                        autoResize="true"
                        indentUnit="4"
                        readOnly="true"
                        mode="javascript">
                <![CDATA[
                "dependencies": [
                    "widget.js"
                ]
                ]]>
                </docs:code-editor>
                <p>
                    If a <code>string</code> dependency does not have a file extension
                    then it is treated as a module name. For example:
                </p>
                <docs:code-editor 
                        autoResize="true"
                        indentUnit="4"
                        readOnly="true"
                        mode="javascript">
                <![CDATA[
                "dependencies": [
                    "my-module"
                ]
                ]]>
                </docs:code-editor>
                <p>
                    Lastly, a few additional short-hand dependencies are supported as
                    shown below:
                </p>
                <ul>
                    <li>
                        <b>Module</b>: <code>{ "module": "my-module" }</code>
                    </li>
                    <li>
                        <b>Resource</b>: <code>{ "path": "widget.js" }</code>
                    </li>
                </ul>
            </docs:section>

            <docs:section heading="Extensions Format">
                <p>
                    Extensions are provided as an array of objects using the
                    <code>extensions</code> property as a property of the top-level <code>raptor</code> object.
                    Each extension supports two properties:
                </p>
                <ul>
                    <li>
                        <b>name</b>: The name of the extension. The name of the extension is arbitrary, but
                                     there are a few well-defined names such as "server", "browser", "node", "rhino", etc.
                                     For more details on extension names see 
                                     <a href="#ExtensionNames">
                                        Extension Names below
                                     </a>
                    </li>
                    <li>
                        
                    </li>
                </ul>
                <docs:section heading="Extension Conditions">
                    <p>
                        An extension definition can also include a <code>condition</code>
                        property that defines a JavaScript expression that is evaluated
                        at runtime to determine whether or not the dependencies for the
                        extension should be included.
                    </p>
                </docs:section>
            </docs:section>

            
        </docs:section>

        <docs:section heading="Module Dependencies">
            <p>
                RaptorJS packages allow module dependencies to be declared. Every
                RaptorJS module is expected to have a corresponding <code>package.json</code>
                file that describes the dependencies for the module. RaptorJS
                resolves a module name to a <code>package.json</code> file
                based on the name of the module. That is, the <code>package.json</code>
                is expected to be located in a directory based on the module name.
                RaptorJS will try a few different possible resource paths when
                trying to resolve a module name to a <code>package.json</code> file.
                The possible locations for a module's <code>package.json</code> file
                are described below:
            </p>
            <ol>
                <li>
                    
                </li>
            </ol>
        </docs:section>

        <docs:section heading="Extensions">
            <p>
                
            </p>
            <docs:section heading="Extension Names" anchor-name="ExtensionNames">
                <p>
                    
                </p>
            </docs:section>
        </docs:section>

        <docs:section heading="Package Dependency Types">
            <docs:section heading="Registering Dependency Types" anchor-name="RegisteringDependencyTypes">
                
            </docs:section>
        </docs:section>
        
    </docs:docs>
    
</c:template>

